// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		UserData
		Client
		AuthorizeData
		AccessData
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserData_Type int32

const (
	UserData_NIL    UserData_Type = 0
	UserData_PROTO  UserData_Type = 1
	UserData_BYTES  UserData_Type = 2
	UserData_STRING UserData_Type = 3
	UserData_INT    UserData_Type = 4
	UserData_UINT   UserData_Type = 5
	UserData_BOOL   UserData_Type = 6
	UserData_FLOAT  UserData_Type = 7
)

var UserData_Type_name = map[int32]string{
	0: "NIL",
	1: "PROTO",
	2: "BYTES",
	3: "STRING",
	4: "INT",
	5: "UINT",
	6: "BOOL",
	7: "FLOAT",
}
var UserData_Type_value = map[string]int32{
	"NIL":    0,
	"PROTO":  1,
	"BYTES":  2,
	"STRING": 3,
	"INT":    4,
	"UINT":   5,
	"BOOL":   6,
	"FLOAT":  7,
}

func (x UserData_Type) String() string {
	return proto.EnumName(UserData_Type_name, int32(x))
}
func (UserData_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorModel, []int{0, 0} }

type UserData struct {
	Type UserData_Type `protobuf:"varint,1,opt,name=type,proto3,enum=model.UserData_Type" json:"type,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Data []byte        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *UserData) Reset()                    { *m = UserData{} }
func (m *UserData) String() string            { return proto.CompactTextString(m) }
func (*UserData) ProtoMessage()               {}
func (*UserData) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *UserData) GetType() UserData_Type {
	if m != nil {
		return m.Type
	}
	return UserData_NIL
}

func (m *UserData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Client struct {
	Id          string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret      string    `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	RedirectUri string    `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	UserData    *UserData `protobuf:"bytes,4,opt,name=user_data,json=userData" json:"user_data,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *Client) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Client) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Client) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

func (m *Client) GetUserData() *UserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

type AuthorizeData struct {
	ClientId            string    `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Code                string    `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	ExpiresIn           int32     `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Scope               string    `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	RedirectUri         string    `protobuf:"bytes,5,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	State               string    `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	CreatedAt           []byte    `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserData            *UserData `protobuf:"bytes,8,opt,name=user_data,json=userData" json:"user_data,omitempty"`
	CodeChallenge       string    `protobuf:"bytes,9,opt,name=code_challenge,json=codeChallenge,proto3" json:"code_challenge,omitempty"`
	CodeChallengeMethod string    `protobuf:"bytes,10,opt,name=code_challenge_method,json=codeChallengeMethod,proto3" json:"code_challenge_method,omitempty"`
}

func (m *AuthorizeData) Reset()                    { *m = AuthorizeData{} }
func (m *AuthorizeData) String() string            { return proto.CompactTextString(m) }
func (*AuthorizeData) ProtoMessage()               {}
func (*AuthorizeData) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *AuthorizeData) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AuthorizeData) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *AuthorizeData) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *AuthorizeData) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AuthorizeData) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

func (m *AuthorizeData) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *AuthorizeData) GetCreatedAt() []byte {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *AuthorizeData) GetUserData() *UserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

func (m *AuthorizeData) GetCodeChallenge() string {
	if m != nil {
		return m.CodeChallenge
	}
	return ""
}

func (m *AuthorizeData) GetCodeChallengeMethod() string {
	if m != nil {
		return m.CodeChallengeMethod
	}
	return ""
}

type AccessData struct {
	ClientId        string    `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	AuthorizeCode   string    `protobuf:"bytes,2,opt,name=authorize_code,json=authorizeCode,proto3" json:"authorize_code,omitempty"`
	PrevAccessToken string    `protobuf:"bytes,3,opt,name=prev_access_token,json=prevAccessToken,proto3" json:"prev_access_token,omitempty"`
	AccessToken     string    `protobuf:"bytes,4,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	RefreshToken    string    `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn       int32     `protobuf:"varint,6,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Scope           string    `protobuf:"bytes,7,opt,name=scope,proto3" json:"scope,omitempty"`
	RedirectUri     string    `protobuf:"bytes,8,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	CreatedAt       []byte    `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UserData        *UserData `protobuf:"bytes,10,opt,name=user_data,json=userData" json:"user_data,omitempty"`
}

func (m *AccessData) Reset()                    { *m = AccessData{} }
func (m *AccessData) String() string            { return proto.CompactTextString(m) }
func (*AccessData) ProtoMessage()               {}
func (*AccessData) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *AccessData) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *AccessData) GetAuthorizeCode() string {
	if m != nil {
		return m.AuthorizeCode
	}
	return ""
}

func (m *AccessData) GetPrevAccessToken() string {
	if m != nil {
		return m.PrevAccessToken
	}
	return ""
}

func (m *AccessData) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AccessData) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *AccessData) GetExpiresIn() int32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *AccessData) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AccessData) GetRedirectUri() string {
	if m != nil {
		return m.RedirectUri
	}
	return ""
}

func (m *AccessData) GetCreatedAt() []byte {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *AccessData) GetUserData() *UserData {
	if m != nil {
		return m.UserData
	}
	return nil
}

func init() {
	proto.RegisterType((*UserData)(nil), "model.UserData")
	proto.RegisterType((*Client)(nil), "model.Client")
	proto.RegisterType((*AuthorizeData)(nil), "model.AuthorizeData")
	proto.RegisterType((*AccessData)(nil), "model.AccessData")
	proto.RegisterEnum("model.UserData_Type", UserData_Type_name, UserData_Type_value)
}
func (m *UserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Client) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Client) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	if len(m.RedirectUri) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.RedirectUri)))
		i += copy(dAtA[i:], m.RedirectUri)
	}
	if m.UserData != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UserData.Size()))
		n1, err := m.UserData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AuthorizeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ExpiresIn))
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if len(m.RedirectUri) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.RedirectUri)))
		i += copy(dAtA[i:], m.RedirectUri)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if m.UserData != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UserData.Size()))
		n2, err := m.UserData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.CodeChallenge) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.CodeChallenge)))
		i += copy(dAtA[i:], m.CodeChallenge)
	}
	if len(m.CodeChallengeMethod) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.CodeChallengeMethod)))
		i += copy(dAtA[i:], m.CodeChallengeMethod)
	}
	return i, nil
}

func (m *AccessData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccessData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClientId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.ClientId)))
		i += copy(dAtA[i:], m.ClientId)
	}
	if len(m.AuthorizeCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.AuthorizeCode)))
		i += copy(dAtA[i:], m.AuthorizeCode)
	}
	if len(m.PrevAccessToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.PrevAccessToken)))
		i += copy(dAtA[i:], m.PrevAccessToken)
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.ExpiresIn != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ExpiresIn))
	}
	if len(m.Scope) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Scope)))
		i += copy(dAtA[i:], m.Scope)
	}
	if len(m.RedirectUri) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.RedirectUri)))
		i += copy(dAtA[i:], m.RedirectUri)
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	if m.UserData != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.UserData.Size()))
		n3, err := m.UserData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserData) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Client) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.RedirectUri)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *AuthorizeData) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovModel(uint64(m.ExpiresIn))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.RedirectUri)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CodeChallenge)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CodeChallengeMethod)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *AccessData) Size() (n int) {
	var l int
	_ = l
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.AuthorizeCode)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.PrevAccessToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovModel(uint64(m.ExpiresIn))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.RedirectUri)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.UserData != nil {
		l = m.UserData.Size()
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (UserData_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Client) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Client: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Client: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &UserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = append(m.CreatedAt[:0], dAtA[iNdEx:postIndex]...)
			if m.CreatedAt == nil {
				m.CreatedAt = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &UserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeChallengeMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeChallengeMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccessData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccessData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccessData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizeCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevAccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = append(m.CreatedAt[:0], dAtA[iNdEx:postIndex]...)
			if m.CreatedAt == nil {
				m.CreatedAt = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserData == nil {
				m.UserData = &UserData{}
			}
			if err := m.UserData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0xae, 0xd2, 0x40,
	0x18, 0xb5, 0xa5, 0x2d, 0x9d, 0x8f, 0x9f, 0x5b, 0xc7, 0xab, 0x69, 0x62, 0x24, 0x88, 0xb9, 0x09,
	0x31, 0x86, 0x05, 0x3e, 0x01, 0xe0, 0x4f, 0x48, 0x10, 0x4c, 0x6f, 0x59, 0xdc, 0x55, 0x33, 0xb6,
	0x9f, 0xd2, 0x08, 0x6d, 0x33, 0x1d, 0x8c, 0xd7, 0x9d, 0x4f, 0xe5, 0x2b, 0xb8, 0x74, 0xe5, 0xda,
	0xb0, 0xf3, 0x2d, 0xcc, 0x4c, 0x0b, 0xb9, 0x95, 0xdc, 0xcb, 0xee, 0xcc, 0x99, 0xf3, 0x31, 0xe7,
	0x3b, 0x87, 0x14, 0x1a, 0x9b, 0x34, 0xc2, 0xf5, 0x20, 0xe3, 0xa9, 0x48, 0xa9, 0xa9, 0x0e, 0xbd,
	0x1f, 0x1a, 0xd8, 0xcb, 0x1c, 0xf9, 0x2b, 0x26, 0x18, 0xed, 0x83, 0x21, 0xae, 0x33, 0x74, 0xb5,
	0xae, 0xd6, 0x6f, 0x0f, 0xcf, 0x07, 0x85, 0x7e, 0x7f, 0x3d, 0xf0, 0xaf, 0x33, 0xf4, 0x94, 0x82,
	0x52, 0x30, 0x12, 0xb6, 0x41, 0x57, 0xef, 0x6a, 0x7d, 0xe2, 0x29, 0x2c, 0xb9, 0x88, 0x09, 0xe6,
	0xd6, 0xba, 0x5a, 0xbf, 0xe9, 0x29, 0xdc, 0xbb, 0x02, 0x43, 0x4e, 0xd1, 0x3a, 0xd4, 0xe6, 0xd3,
	0x99, 0x73, 0x8f, 0x12, 0x30, 0xdf, 0x7b, 0x0b, 0x7f, 0xe1, 0x68, 0x12, 0x8e, 0xaf, 0xfc, 0xd7,
	0x97, 0x8e, 0x4e, 0x01, 0xac, 0x4b, 0xdf, 0x9b, 0xce, 0xdf, 0x3a, 0x35, 0x29, 0x9d, 0xce, 0x7d,
	0xc7, 0xa0, 0x36, 0x18, 0x4b, 0x89, 0x4c, 0x89, 0xc6, 0x8b, 0xc5, 0xcc, 0xb1, 0xe4, 0xcc, 0x9b,
	0xd9, 0x62, 0xe4, 0x3b, 0xf5, 0xde, 0x77, 0x0d, 0xac, 0xc9, 0x3a, 0xc6, 0x44, 0xd0, 0x36, 0xe8,
	0x71, 0xa4, 0x5c, 0x13, 0x4f, 0x8f, 0x23, 0xfa, 0x08, 0xac, 0x1c, 0x43, 0x8e, 0xa2, 0xf4, 0x57,
	0x9e, 0xe8, 0x53, 0x68, 0x72, 0x8c, 0x62, 0x8e, 0xa1, 0x08, 0xb6, 0x3c, 0x56, 0x4e, 0x89, 0xd7,
	0xd8, 0x73, 0x4b, 0x1e, 0xd3, 0x17, 0x40, 0xb6, 0x39, 0xf2, 0x40, 0x6d, 0x62, 0x74, 0xb5, 0x7e,
	0x63, 0x78, 0xf6, 0x5f, 0x0e, 0x9e, 0xbd, 0x2d, 0x51, 0xef, 0xb7, 0x0e, 0xad, 0xd1, 0x56, 0xac,
	0x52, 0x1e, 0x7f, 0x43, 0x15, 0xe1, 0x63, 0x20, 0xa1, 0x32, 0x15, 0x1c, 0x1c, 0xd9, 0x05, 0x31,
	0x8d, 0x64, 0x42, 0x61, 0x1a, 0x1d, 0x52, 0x93, 0x98, 0x3e, 0x01, 0xc0, 0xaf, 0x59, 0xcc, 0x31,
	0x0f, 0xe2, 0x44, 0x39, 0x32, 0x3d, 0x52, 0x32, 0xd3, 0x84, 0x9e, 0x83, 0x99, 0x87, 0x69, 0x86,
	0xca, 0x0b, 0xf1, 0x8a, 0xc3, 0xd1, 0x22, 0xe6, 0xf1, 0x22, 0x72, 0x50, 0x30, 0x81, 0xae, 0x55,
	0x0e, 0xca, 0x83, 0x7c, 0x2d, 0xe4, 0xc8, 0x04, 0x46, 0x01, 0x13, 0x6e, 0x5d, 0x35, 0x45, 0x4a,
	0x66, 0x24, 0xaa, 0xdb, 0xdb, 0x27, 0xb6, 0xa7, 0x17, 0xd0, 0x96, 0x2b, 0x04, 0xe1, 0x8a, 0xad,
	0xd7, 0x98, 0x7c, 0x42, 0x97, 0xa8, 0xb7, 0x5a, 0x92, 0x9d, 0xec, 0x49, 0x3a, 0x84, 0x87, 0x55,
	0x59, 0xb0, 0x41, 0xb1, 0x4a, 0x23, 0x17, 0x94, 0xfa, 0x41, 0x45, 0xfd, 0x4e, 0x5d, 0xf5, 0xfe,
	0xea, 0x00, 0xa3, 0x30, 0xc4, 0x3c, 0x3f, 0x9d, 0xea, 0x05, 0xb4, 0xd9, 0xbe, 0x83, 0xe0, 0x46,
	0xbe, 0xad, 0x03, 0x3b, 0x91, 0x41, 0x3f, 0x87, 0xfb, 0x19, 0xc7, 0x2f, 0x01, 0x53, 0x3f, 0x1b,
	0x88, 0xf4, 0x33, 0x26, 0xe5, 0x3f, 0xe0, 0x4c, 0x5e, 0x14, 0xcf, 0xf9, 0x92, 0x96, 0xf9, 0x56,
	0x64, 0x45, 0xf8, 0x0d, 0x76, 0x43, 0xf2, 0x0c, 0x5a, 0x1c, 0x3f, 0x72, 0xcc, 0x57, 0xa5, 0xa6,
	0xe8, 0xa0, 0x59, 0x92, 0x85, 0xa8, 0x5a, 0xae, 0x75, 0x6b, 0xb9, 0xf5, 0xbb, 0xca, 0xb5, 0x8f,
	0xcb, 0xad, 0xd6, 0x48, 0xee, 0xac, 0x11, 0x4e, 0xd4, 0x38, 0x6e, 0xfe, 0xdc, 0x75, 0xb4, 0x5f,
	0xbb, 0x8e, 0xf6, 0x67, 0xd7, 0xd1, 0x3e, 0x58, 0xea, 0xf3, 0xf0, 0xf2, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0xd5, 0x41, 0xfb, 0x2d, 0x04, 0x00, 0x00,
}
